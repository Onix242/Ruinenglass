  ------
  DOCKET
  * tags difficulty

  ----------------8<-------------[ architecture exploration ]------------------
  Feature-set for engine: font rendering that allows zooming in
  closely, text-based VFX, cooperative 3D pathfinding upwards of 30
  entities (and up to 60 for level editing zoomed out from a
  distance), user-input typing in different languages and a mix of
  different languages and custom glyphs, automatic detection of
  keyboard layout, developer tools for art that are also user-facing
  tools for semi-procedural authorship (ASCII art, animation, music
  language creation, dialogue).

  - Math
    = Rotors + Rational trig rotor paper + SLerp with >2 rotor
    = Math + Quaternions RESOURCE(): http://marc-b-reynolds.github.io/categories.html
    = RESOURCE(): https://twitter.com/SpiveeWorks/status/1592674655235887105
    = RESOURCE(): https://jarviscarroll.net/math/rotors.pdf
    = RESOURCE(): https://www.johndcook.com/blog/2022/11/30/trilinear-coordinates/
      RESOURCE(): https://www.johndcook.com/blog/2019/12/11/redundant-coordinates/
      RESOURCE(): https://www.johndcook.com/blog/2023/01/18/barycentric-trilinear/
      Explore trilinear coordinates with barycentric coordinates
    = RESOURCE(): https://www.johndcook.com/blog/2010/01/19/dont-invert-that-matrix/
      RESOURCE(): https://blog.demofox.org/2017/01/02/incremental-least-squares-surface-and-hyper-volume-fitting/
      RESOURCE(): https://stackoverflow.com/questions/24117204/algorithm-for-simple-squared-squares
    = RESOURCE(): Generic functions https://allenchou.net/blog/
    = RESOURCE(): https://blog.demofox.org/2014/11/04/four-ways-to-calculate-sine-without-trig/
    = RESOURCE(): Shuffling a POSET - https://www.youtube.com/watch?v=dr-jUCelobk
      > Topological sort in two passes odd and even in pairs
      > Useful for randomising a list fairly while still mailing certain ordered rules.
      > Might be useful for language learning e.g. transitive verbs are tested before intransitive!
      > Even/Odd int http://marc-b-reynolds.github.io/math/2022/12/16/ParityWalks.html
      > https://marc-b-reynolds.github.io/math/2022/01/28/RNGParity.html
        ~"u  |= 1; return u ^ (u >> 1);" = "return u ^ rotl(u,1)" // 3u
        ~"u <<= 1; return u ^ (u >> 1);" = "return u ^ rotl(u,1) ^ 1" // 3u + 1

  - Memory
    = [Mr.4th dimensions'] Arenas

  - Static Custom Strings
    = [Mr.4th dimensions'] Utf-8 handling, replace all stdio's printf-alikes
    = [Emacs'] Gap Buffer for simple text input
    = Defining the concept of a paragraph?

  - Z!
    = Need to make a solid concept of ground levels, so the camera
      can be freely placed in Z and have multiple ground levels in
      one sim region.
    = Concept of ground in collision so it can handle collisions
      coming onto _and off of_ stairwells, for example.
    = Straighten out all coordinate systems!
      > Screen
      > World
      > Texture

  - Rendering
    = IMPORTANT(chowie): Enable showing grid lines, name them "data prison"
    = Blit bitmap fonts as mirrored textures
    = Subdivide square meshes on the fly for bending
    = [Martins'] monospace font shader
    = 3D Rendering
    = Matrix Camera (Orthographic and Perspective transition)
    Sample camera functions - RESOURCE(): https://github.com/skejeton/cave-tropes/blob/main/src/camera.cpp
    = HmH Day 333 14:01 - Orthographic to perspective camera when climbing stairs vertically would look good!
    = Non-square shapes mapping to grid e.g. circle to multiple squares on a grid?
    = [Brehensam's] shapes primatives: diagonal line drawing
    = Splines not only for animation; to populate things e.g. roads, rivers
    = Colour linear to srgb conversion. OkLab support?
      RESOURCE(): https://youtu.be/sRL_RU7-jfc?t=123
      > Reconstruction position by camera depth and shadow mapping /
        bloom
      > NOTE: Cutting down the v4 Colour / Emission vertex data isn't
        super impactful on performance
      RESOURCE(): https://gist.github.com/rygorous/2203834
      RESOURCE(): https://gamedev.stackexchange.com/questions/92015/optimized-linear-to-srgb-glsl
      RESOURCE(): http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
    = Procedural UI text splats for the backdrop based on the chosen
      font. Animation when going to setting or anything at fades to
      black or needs a blank backing has a backdrop for text interfaces.
      > Text should be rotated around unit circle, placed evenly by
        trifan alignment like circle collision_group, need to fill small
        gaps too?
    = LOD should fill small holes (if too far).
    = Play with Mipmaps like Sandvich disappearing as you got
      closer. Or a cheap fog effect RESOURCE(): https://simonschreibt.de/gat/deus-ex-scanlines/
      > Fog is under Continuum Dynamics!
    = Tessellation (corner) to make auto hole-aware wrapping of
      surfaces e.g. fences placed along a hole or balcony. Need
      symmetry for W & S edges.
    = Tessellation are wrapped with moveable control points.
    = Wrapping noise HmN RESOURCE(): https://discord.com/channels/239737791225790464/1290836334750990358
    = Graphics tricks in games - RESOURCE(): https://simonschreibt.de/game-art-tricks/
    = Parallax railing - RESOURCE(): https://simonschreibt.de/gat/alpha1-top5/
    = Texturing faces animation - RESOURCE(): https://simonschreibt.de/gat/fishtanks-in-games/
    = Finding stuff amongst the grass - RESOURCE(): https://simonschreibt.de/gat/zelda-the-bling-bling-offset/
    = Text shadows TODO! Not too dark grey for the text shadows do I
      make them all the same thickness and size, or should it vary by
      distance?
      RESOURCE(): https://www.reddit.com/r/oddlysatisfying/comments/77u8ha/mirror_calligraphy/
    = Light refraction code - RESOURCE(): https://robertandrewspencer.com/rainbow/
    = RESOURCE(): https://www.youtube.com/watch?v=rIX-RsFFF4Y
      Flood-fill but sample 2 blocks on the face of the normal. If the
      furthest sample is darker (d), then the block's side is in shadow (S).
      Lights are 32 block radius. Lighting is "inaccurate", but good enough!
      Works for all RGB channels too, wow! Usually flood fill looks flat.
      E.g.  x  x  [ ]
            d  l  S ]
    = RESOURCE(): https://forkingpaths.dev/posts/22-11-01/vector_graphics.html
    = Shader CRT
      > RESOURCE(): https://mini.gmshaders.com/p/gm-shaders-mini-crt
      > Fractal texturing without mipmapping, replaced with numerical methods -
        RESOURCE(): https://mini.gmshaders.com/p/gm-shaders-mini-fractal-texturing-1408552
    = Outlines and dithering RESOURCE(): https://blog.playstation.com/2019/10/17/return-of-the-obra-dinn-adventures-in-one-bit-out-tomorrow/
      - RESOURCE(): Stable-diffusion dithering - https://www.youtube.com/watch?v=HPqGaIMVuLs
    = Real projections with solid concept of project/unproject (with mouse too)

  - Sorting?

  - Enable Multi-Threading
    = Ticket-taking
    = Dynamic memory arenas

  - UI
    = (A little GUI, but only a little!) [Red Blob Games'] Switches / Sliders / etc.
    = RESOURCE(): https://forkingpaths.dev/posts/23-03-10/rule_based_styling_imgui.html
    = RESOURCE(): Rect cuts - https://halt.software/p/rectcut-for-dead-simple-ui-layouts
    = RESOURCE(): https://ambientimpact.com/web/snippets/amazons-menu-prediction-cone
      Prediction drop-down menus triangle???
    = Radial menu + Spiral
    = Geologica (heading) + Hyperlegible (body -> 0.3f leading)

  - Debug Code
    = [Computer Enhance's] Simple Profiler set as a base
    = Logging
    = Diagramming
    = Draw tile chunks so we can verify that things are aligned / in the chunks we want them in / etc.
    = Thread visualisation

  - Audio
    = [Martins'] Multi-threaded audio
    = Audio Mixer
    = RESOURCE(): Freeverb - https://gist.github.com/rxi/d542a249b0bc52a9ac9bdfc047dc4083

  - World
    = [Red Blob Games'] Grid
    = [Fabian's] Morton's Code For Tile Storage? Must be u32, not s32!
    = RESOURCE(): https://grahamshawcross.com/2012/02/03/a-dream-world/
      RESOURCE(): Inset tiles - https://bsky.app/profile/delaneyking.bsky.social/post/3l7fxcrd3ec2x
      Splitting a tile in 4?
    = TODO(chowie): Auto-size edges and corner by a ratio once buckled
    down how big those should be. You would pick the body > edges and
    corners are picked for you (which you can resize at a later point)

  - Sim Regions
      = Multiple Sim Regions per frame
        > Per entity clocking
        > Multiple Sim Regions and active entities
        > Sim Region Merging?

  - RNG
    = Random placement of points, dithering (better than Bayers and whatever Call of Duty uses)?
      Need Fibonacci and Phi -
      RESOURCE(): https://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/

  RESOURCE: https://www.gridsagegames.com/blog/2015/07/roguelike-development-rexpaint/
  * Picross Growable Structure Editor
    = Hybrid Editor for 3D modelling, animation, level editor
    = Priority-based non-linear growth for hollow rectangular structures
    = Explore priority-based for other things occulsion, colours etc.
    = Symmetry line-like bounding box movable base point
      > Animation stretching as copy
      > Scrubbable timeline
      > Onion skinning
      > Animation preview window
    = Parity "masking" for non-linear grid
    = Changable tesselation parity of grid (see Hammer level editor)
    = Perspective + Orthographic switchable camera views
    = 90deg snap rotation of ASCII walls e.g. wall > window cover during rain
    = 'Ctrl-c' and 'Ctrl-v' for objects, glyphs etc.
    = Undo for all ops
    = Can I do something better than layers?
    = Paintable ASCII textures on greybox via right-click-to-copy glyphs
    = Searchable ASCII textures
    = In-editor custom glyph importer
      > Rearrange glyphs in glyph window
      > Glyph mirroring?
      > Find and Replace glyph
    * Design UI in a single window. i.e. no splitting
      perspective/orthographic viewport into 4, use blender's keybinds
      to snap to axis; editing the text/glyphs on the faces
      > TODO(chowie): Look at Tiffany Smart's Marvel Snap UI
    = Brush type textures with MS spray paint-like (e.g. 5x5 default) with random placement (glyphs + colour)
    = Selecting colour schemes with image-wide swaps + colour picker (+ colour shifting?)
    = Editing transtion between bounding box that groups voxels and individual
    * What if the bounding box is larger than the chunk/sim region?
    = Saved copies with tags, view as a sidebar list (see REXPaint)
      > Copies viewable in a 3D room
      > Favourites list for copies in a radial menu
      > Box Object naming tag
      > [Nintendo's] level editor searchable comments/tags placed in-world
    = Movable menus + UI Tear Mode
    = User specified draggable UI snapping e.g. Colours and defining custom waypoints
    = Display shortcut history as a menu at the bottom to know which hotkeys you've pressed.
    * To what extent is an undo available?
    * Tablet pressure for colour?
    = IMPORTANT(chowie): Think about max area for stretching structures?
      Intentionally grow the stretching structures to the max and I can
      get the memory total usage for the structures (basically run the
      game fully during the rain) -> more deterministic.
    = Random placement of objects in a brush or more interestingly on
      surfaces (think lamps on fences). Default evenly spaced with an
      apron and no overlap. But if it can overlap you could make some
      interesting walls that splats textured surfaces. E.g. low hanging
      walls with stalks that stick out -> animates into a tower
    = Try sort by colour to aid in memory when you can’t remember the names
      RESOURCE(): https://robertandrewspencer.com/sort-by-hue/

  - Waypoint web, refer to HmH where we did made directed edges with sprite sorting and walked the graph with visted nodes

  - Particle Systems
    = RESOURCE(): https://cowboyprogramming.com/2007/01/05/multithreading-particle-sytems/
    = Rain serving as compass directions
    * Mesh to particle
    TODO(chowie): HmH search up mesh deformation! Different from mesh skinning?
    = Vector/flow fields in gridded world for dynamic wind patterns. See (3D) perlin noise
      RESOURCE(): https://cowboyprogramming.com/2008/04/01/practical-fluid-mechanics/
      RESOURCE(): Fluidsim Base - https://www.shadertoy.com/view/MdSczK
    = 2D parallax mapping (pixel shader) RESOURCE(): https://cowboyprogramming.com/2007/01/05/parallax-mapped-bullet-holes/

  - Collision Detection (only for player controllers)
    = CCD, SAT or similar

  - Entity
    = [Ryan Fleury's] Flag Storage
    = Brains
    = Storage & updating entities -> on rain, saving out to disk
      storage's stays low, need to combat the amount of entities that
      need updating (memory usage will probably increase by more than
      2x)
    = Reflection of letters on opposite surfaces -> pairwise parallel
      updating across entities within a range
    = Separate entity static to include Movement-by-copy
    = Packing transforms 3D - RESOURCE(): https://hero.handmade.network/forums/code-discussion/t/897-entity_transform_type
    = Split entities by type rather than all?
    = RESOURCE(): https://www.youtube.com/watch?v=FEch9yoWneo -
      Not to render the world if an axis >= [number]. E.g. If you said
      you cannot render if greater than X >= 6. Then, you can make any
      wall a greenscreen!
    = Multi-segment snakes (if each letter is an entity)
      > ~25 avg. length with basic to no AI (no AI could get promoted to basic)
      > Typically with a small search space?
      > Length = move speed + priority of who gives way if two will collide,
        longer is slower with better priority (like public transport buses)

  - AI
    = AI "storage" (how much state and where?)

  RESOURCE(): https://cowboyprogramming.com/2007/03/12/optimized-asset-processing/
  Asset pipelines: converters, calculators, packers
  - Asset Loading System
    = Bitmaps,
    = StbTrueType Text, RESOURCE(): http://arkanis.de/weblog/2023-08-14-simple-good-quality-subpixel-text-rendering-in-opengl-with-stb-truetype-and-dual-source-blending#gl45-subpixel-text-rendering-subpixel-pos
    = Audio?
    = HUID and GUID RESOURCE(): https://cowboyprogramming.com/2007/01/04/practical-hash-ids/
      U32 to u32 hash - https://stackoverflow.com/questions/664014/what-integer-hash-function-are-good-that-accepts-an-integer-hash-key

  - Text data structures:
    = Unicode lib - Inspired by HMN scroll:
    RESOURCE(): https://github.com/HandmadeNetwork/wishlist/discussions/16
    RESOURCE(): https://github.com/HandmadeNetwork/wishlist/discussions/20
    RESOURCE(): https://www.youtube.com/watch?v=1RjU5XJqysc
    > Smallest unit are words (word struct has pointer to screen), so
      formatting like bold, italics, colour is quick! Cursor contains
      all types (char, word, para, level) as well!
    > What if text filters could autogenerate "grouped tabs" e.g. A-Z
      filter would generate on a sidebar buttons you could then
      click. You would have to autogenerate a tree with linked list
      for each entry (nodes)? You could do nesting filters on top of
      that lol! “Group” then “sort” filter displayed chronologically
      left to right, and can be rearranged/swapped.
    > Now having a hierarchy to play with is quite different from
      other text editors!
    > Node editor (subtree gets complicated with a textual position)
      vs text editor (simpler way of editing, offset from file or line
      and column)
    > Searching should include for "free list", "free-list",
      "free…[words later]…list"
    > IMPORTANT(chowie): Case-insensitive search

  - Metagame / Save Game?
    = How do you enter a "save slot"?
    = Persistent Unlocks/etc.
    = Save game.
    * Continuous Save for crash recovery?

  - Rudimentary World Gen (no quality, just "what sorts of things" we do)

  * AI
    = Coop A* Pathfinding
    = RESOURCE(): https://www.reddit.com/r/gamedev/comments/dk19g6/new_pathfinding_algorithm_factorio/
    = RESOURCE(): https://www.redblobgames.com/pathfinding/
    = Include time as a 4d grid visualisation graph
    = Light word generation with Bigrams and markov chains with pairs
    of hooks that are not fixed length
    RESOURCE(): https://linguistics.stackexchange.com/questions/4082/impossible-bigrams-in-the-english-language
    = Parser
      > Parse trees scanners - RESOURCE(): https://www.cs.binghamton.edu/~zdu/parsdemo/gramintro.html
      > Recursive descent parsers - RESOURCE(): https://www.cs.binghamton.edu/~zdu/parsdemo/recintro.html
      > RESOURCE(): https://btmc.substack.com/p/how-to-parse-expressions-easy

  * Procedural Animation
    = How do "eels" slide and bend (at corners) along walls?
    = Animation pipeline bones - RESOURCE(): https://animcoding.com
    = https://vladh.net/game-engine-skeletal-animation/
    = Skeletal animation system too slow, Abzu uses procedural
      animation and blend shapes for fish + kelp
      https://www.youtube.com/watch?v=l9NX06mvp2E
    = http://blog.wolfire.com/2014/05/GDC-2014-Procedural-Animation-Video
    = Trifan concentric circles for shattering? - RESOURCE(): https://cowboyprogramming.com/2007/01/05/shattering-reality/
    = Trifan sampling blob physics RESOURCE(): https://cowboyprogramming.com/2007/01/05/blob-physics/
    = Clean up our notion of multiple part entities and how they are animated
    = Spring/Dampers? RESOURCE(): https://theorangeduck.com/page/spring-roll-call
      RESOURCE(): https://theorangeduck.com/page/perfect-tracking-springs
    = RESOURCE(): https://theorangeduck.com/page/tags-ranges-masks

  - Raw Input / Multimonitor / Multiple keyboards types
    = GetKeyboardLayout
    = ClipCursor for multimonitor support
    = Wtf is QueryCancelAutoplay?
  - Controller
    = What feedback on buttons not doing anything means? Disambiguate!
      RESOURCE(): https://cowboyprogramming.com/2007/01/02/pushhing-buttons/
  - Check out hybrid controller keyboard scheme in POE2 for input method

  - RESOURCE(): https://www.reddit.com/r/Minecraft/comments/13v6q19/notch_couldve_made_the_view_bob_animation_less/
    Smooth out curves - Sin(dt)^2 = double freq & halving amplitude

  - RESOURCE(): https://www.reddit.com/r/minecraftsuggestions/comments/iec26k/config_file_to_whitelist_what_assets_should_be/
    Reload few assets via a whitelist if noticable?

  RESOURCE(): https://neugierig.org/software/blog/2018/07/options.html
  - Considerations for options
    = RESOURCE(): https://robertandrewspencer.com/antennapod-rewind/
      IMPORTANT(chowie): QOL when in-editor. Rewinds a little bit to
      where you last left off, scales based on number of hours and days,
      so you remember the context. Should it be sooner, it continues
      exactly as you left off.

  RESOURCE(): Defer? https://btmc.substack.com/p/implementing-scoped-defer-in-c

  ----------------8<-------------[ production / game ]------------------
  Voxel ASCII is like the faces of toy blocks.

  - Procedural World Generation?
    = Biomes
    = Growing ivy around non-growable structure
    = Terrain sampling and extending (horizontally) but
      drawing/grouping (hashing) vertically
      RESOURCE(): https://m.youtube.com/watch?v=r8rn7Vppgrc
    = RESOURCE(): Gradient for mountains not noise - https://iquilezles.org/articles/morenoise/
    = RESOURCE(runevision): Layer-based deterministic gen - https://www.youtube.com/watch?v=4oJGkx0K8UQ
    = RESOURCE(): Interesting generation spaces - http://maetl.net/notes/storyboard/generating-interesting-content
    = Cyclic generation!
      > RESOURCE(): http://ctrl500.com/tech/handcrafted-feel-dungeon-generation-unexplored-explores-cyclic-dungeon-generation/
      > RESOURCE(): http://maetl.net/notes/storyboard/cyclic-dungeon-generation

    = Top of the starting point of the world made from a spiral, what
    about this instead for variety?
    RESOURCE(): https://www.johndcook.com/blog/2022/05/09/logarithmic-spiral/
    RESOURCE(): https://erich-friedman.github.io/packing/almost/
    RESOURCE(): https://en.wikipedia.org/wiki/Squaring_the_square

  - RESOURCE(): https://robertandrewspencer.com/wherebeen/
    Dataviz for geographic walk data

  - Entity System (will come off concurrent with GAME - scalability)

  * Surfaces peeling off in the wind (like a stack of papers)
    = RESOURCE(): https://mymodernmet.com/illuminated-paper-blowing-in-the-wind/
    = Walls > Particle brains (sim region stored)
    = Procedural animations maybe with a simple bone and inverse kinematics?
    = TODO(chowie): Look at origami to find how they subdivide their
      surfaces. For Deus-Ex, this offset grid pattern is enough for a large
      blowing flag! RESOURCE(): https://simonschreibt.de/gat/deus-ex-3-folds/
      Normal maps simulating cloth. IMPORTANT: The mesh is really close to my
      semi-uniform grid!
    = RESOURCE(): https://www.reddit.com/r/programming/comments/7m97n/cloth_physics_simulation/

  - Interactive Text and Eels
    = Surfaces in the world hold text that can move
    = Keyword dictionary? Highlighting keywords

  - Text Input
    = RESOURCE(): https://www.mentalfloss.com/article/59521/semi-hemi-demi-whats-difference
      I think I use 1 1/2 spaced too = demi-spaced? Because you have a
      space in between words with potentially little other spaces to
      fill in the non-alphabet glyphs of.

  - Talking System
    = Mindmap discovery view
    = Interactable 3-letter commands
    = RESOURCE(): https://robertandrewspencer.com/bring-me-back/
      A QOL is to have /me to replace whatever your generated username
      is without having to remember it!

  - Key rebinding from game layer

  - Graph Visualisations https://datavizcatalogue.com/blog/ternary-graphs-triangular-plots/?

  - Serious Optimisations
    = 18,000 rectangles calls? (that was the fonts)
      > HmH Day 332 shows how to batch at certain intervals; but you have to touch a lot of code usually!

  RESOURCE(): https://www.reddit.com/r/conlangs/comments/cfpeq2/a_minecraftbased_conlang/
  TODO(chowie): Try VSO like in Minecraft!
  /give Onix242 diamond_block 64
    > Verb, a command, if always requiring brackets might be the most memorable
    > Subject is the stablest position of a sentence (to be OSV)

  STUDY(chowie): This is a smart way to do alternating!
  b32x LeftHole = ScreenIndex % 2;
  b32x RightHole = !LeftHole;

  Inspired by Turkish vowel cube mapping.
                                W______________T
                                /             /|                 /|
                               /             / |                / |
                              /             /  |               /  |
            open             /             /   |              /   |
        ______________     H/_____________/Y   |             /    |
       /             /      |             |    |             |    | 
      /             /       |             |    |             |    |
     /             /        |             |    |     unround |    | round
    /             /         |             |    |             |    |
   /_____________/          |   ~         |    |M            |    |
        closed              |             |   /              |   /
                            |             |  /               |  /
                            |             | /                | /
                           X|_____________|/V                |/
                                 AIOU

                                        back
                             _____________
                            |             |
                            |             |
                            |             |
                            |             |
                            |    front    |
                            |             |
                            |             |
                            |             |
                            |_____________|

  ----------------8<-------------[ advice ]------------------

  IMPORTANT(chowie): STUDY(chowie): "Writing the usage code first"
  isn't quite right to CASEY anymore, if you know how the
  implementation should work, not the API is like he uses a
  compression style scheme and if you know you want the API to look a
  certain way, or believe he could determine it, but don't know the
  implementation should look like he goes in the other direction. The
  hardest is not know either side, the efficient way to write the code
  or what the API should look like. Then you're in a no man's land
  like boundary value problems (mathematics), you don't know any in
  between.

  IMPORTANT(chowie): JBlow doesn’t like _clamp_ and would rather fix
  the underlying problem. As a light fix, log them so players can let
  you know!

  RESOURCE(johndcook): https://www.johndcook.com/blog/2024/07/02/incremental-improvement/
  These small changes matters?

  RESOURCE(john d cook): https://www.johndcook.com/blog/2012/08/27/work-or-rest/
  Henri Poincare workflow
  He worked regularly from 10 to 12 in the morning and from 5 till 7
  in the late afternoon. He found that working longer seldom achieved
  anything

  RESOURCE(): https://cowboyprogramming.com/2007/01/04/debug-and-release/
  RESOURCE(): https://hero.handmade.network/forums/code-discussion/t/7125-help_with_day_017_-_win32processkeyboardmessages_being_called_twice%252C_throwing_off_assert_check.#21900
  If you're trying to learn, you should try to figure out the problem
  instead of trying to move on. Solving bugs is a huge part of
  programming and a skill that is important and will benefit you more
  than moving on faster (in my opinion).

  How realistic do you want to model things? Terms for reality - 
  RESOURCE(): https://cowboyprogramming.com/2007/01/02/teleological-vs-ontogenetic/

  RESOURCE(): https://cowboyprogramming.com/2008/03/23/debugging-heisenbugs/
  Finding the most elusive bugs and what types there are.

  RESOURCE(): https://cowboyprogramming.com/2008/02/26/managed-code-in-games/
  RESOURCE(): https://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/ 
  Division of labour that separates engine work from gameplay
  programmer work. Where inefficiencies gets folded into engine
  related code. ECS is a way to understand this from a game designer
  POV, where's it's not ideal from the perspective of the programmer.

  JBlow - To use an ECS is to optimise for the size of the entity
  data, but that's like 2MB that would fit in an L3 or maybe L2
  cache. Not worth to ship.

  A few advice:
  - If you can't find the solution after 2 hours, take a break. Often
  when you come back you'll find the solution quickly.

  - Don't try to solve the issue by comparing the code to Casey's. Try
    to figure out why your code behaves differently and than verify it
    with the handmade hero code.

  - Use the debugger, place a breakpoint in the
    Win32ProcessKeyboardMessages function and look in the call stack
    from where it was called. Inspect variables don't assume their
    values are correct.

  - Keyboard and mouse input debugging is sometimes harder because
    pausing the program with the debugger will make you release the
    key and so no more message for that key will be received if you
    step. Logging messages with OutputDebugString helps a lot in those
    case. But be sure to also output messages for marking the frame
    start, the start and end of processing windows messages and other
    important step in you main loop. This should make it obvious in
    the log if something happens at an unexpected time.

  - If you ask for help, provide your code (if possible with a simple
    way to compile it), not a screenshot, otherwise we won't be able
    to help you.

  RESOURCE(ivanecky): https://hero.handmade.network/forums/code-discussion/t/124-thinking_about_frame_update
  Two schools of thought about Frame Updating
  - First (Casey's)
    = You're at time T when the frame switches. Frame spans from T to
      T + 1, you're calculating what happens in-game at time T to T +
      1; You're trying to predict what the game state will be when the
      next frame switch happens.
      > The problem is it doesn't handle variable framerate, because
      you're PREDICTING what the state will be at time T + 1, so you
      cannot account for variable framerate.

  See Tiny Glade's talk comparing their technology to Lumen's nanite technology.
  - Second (Seems every tutorial and article is):
    = You're at time T, you're calculating what happened to game
    state since time T - 1.
      > The ugly thing is you're displaying state of game from time T at
      time T + 1.
      > I think that this isn't real problem though, because it doesn't
      matter that you're offset by one frame from game time (if you're
      consistent with it).
      > Benefit of this approach is you're handling variable-framerate
      well, cause you always know how much has game time advanced since
      last frame switch.

/*
internal void
RenderWeirdGradient(game_offscreen_buffer *Buffer, v2 Offset)
{
    // STUDY(chowie): Pixels are 32-bit wide, little-endian
    // architecture.
    // Memory Order:   BB GG RR xx
    // Register Order: xx RR GG BB

    u8 *Row = (u8 *)Buffer->Memory;
    for(u32 Y = 0;
        Y < Buffer->Dim.Height;
        ++Y)
    {
        u32 *Pixel = (u32 *)Row;
        for(u32 X = 0;
            X < Buffer->Dim.Width;
            ++X)
        {
            u8 Red = 0;
            u8 Blue = (u8)(X + Offset.x);
            u8 Green = (u8)(Y + Offset.y);

            // STUDY(chowie): Remember pointer arithmetic advances by
            // 4-bytes, an entire u32!
            *Pixel++ = ((Green << 16) |
                        (Blue << 0));
        }

        Row += Buffer->Pitch;
    }
}
*/

